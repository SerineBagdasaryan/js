1) Разница между var, let и const. Когда и что лучше использовать?
 var, let и const используются для объявления переменных.

 Var- Переменная var является глобальной, когда объявлена вне какой-либо функции.
 Это означает, что любая переменная, объявленная через var вне блока функции, доступна для использования во всем окне.
Var является локальной, когда объявлена внутри функции. Это означает, что она доступна и к ней можно обращаться только изнутри этой функции.
Переменные var могут быть объявлены повторно, значение может быть переопределено в будущем, значение может быть определено позже.
var- поддерживает hoisting. Объявление переменной поднимается вверх в пределах области видимости во время компиляции кода.

Let- имеет блочную область видимости. Переменные let могут быть обновлены, но не объявлены повторно, значение может быть определено позже.
let – не поддерживает hoisting(ReferenceError).

Const- объявляет переменную, которая не может быть изменена после инициализации. Попытка изменения значения константы приведет к ошибке. Переменные, объявленные с помощью const, также имеют блочную область видимости, не поддерживает hoisting(ReferenceError), не поддерживают повторное объявление.

Надо использовать  let, когда хотим  создать переменную, которая может изменяться в будущем. Надо использовать const, когда хотим создать переменную, которая не изменится после инициализации. Использовать var только в том случае, если рботаем  с кодом, который был написан до версии ES6 и в котором уже используется var. В противном случае,  надо использовать let или const.

2) Как создать копию объекта, какие способы имеются?
 const original = { a: 1, b: 2 };

const copy = Object.assign({}, original); 
const copy = { ...original };
const copy = JSON.parse(JSON.stringify(original));
Способ с lodash
const copy = _.cloneDeep(original);

3) Как лучше всего выполнить и обработать множество промисов одновременно?

С помощью метода Promise.all().
Метод Promise.all() принимает массив промисов и возвращает новый промис, который разрешится, когда все промисы в массиве разрешатся. Результатом этого нового промиса будет массив значений разрешенных промисов в том порядке, в котором они были переданы.

const promise1 = new Promise((resolve, reject) => {
  setTimeout(() => resolve('Промис 1'), 1000);
});

const promise2 = new Promise((resolve, reject) => {
  setTimeout(() => resolve('Промис 2'), 2000);
});

const promise3 = new Promise((resolve, reject) => {
  setTimeout(() => resolve('Промис 3'), 3000);
});

Promise.all([promise1, promise2, promise3])
  .then((results) => {
    console.log(results);
  })
  .catch((error) => {
    console.error(error);
  });

4) Как в Node.js выполнить HTTP запрос к стороннему ресурсу?
1. Использование модуля http(s);
2.Использование модуля axios
3.Использование модуля node-fetch
4. Использование модуля request

5) Написать функцию, вычисляющую длину последнего слова в строке.

function getLastWordLength(str) {
  str = str.trim();
  const words = str.split(' ');
  if (words.length === 0) {
    return 0;
  }
  return words[words.length - 1].length;
}


console.log(getLastWordLength('Hello world'));

